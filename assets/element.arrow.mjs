!function(){"use strict";var t=function(t){return t.Animation="--animating",t.Collapsed="--collapsed",t.Defined="--defined",t.Disabled="--disabled",t.Expanded="--expanded",t.Interactive="--interactive",t.Loaded="--loaded",t.Scrolled="--scrolled",t}(t||{}),e=t,i=function(t){const{$template:e,template:i,delegatesFocus:l=!1,mode:s="closed",serializable:n=!1}=t,o=this.attachShadow({delegatesFocus:l,mode:s,serializable:n});return e instanceof DocumentFragment&&o.appendChild(e.cloneNode(!0)),"string"==typeof i&&o.setHTMLUnsafe(i),o};const l=["bottom","bottom-left","bottom-right","left","right","top","top-left","top-right"],s=["angle-left-top","angle-right-bottom","angle-right-bottom-fill","angle-right-top","angle-thick-bottom-left","angle-thick-bottom-right-fill","angle-thick-left-bottom-line","angle-thick-top-left","angle-thick-top-right","fill","line"],n=["acute","angled","large","large-acute","large-angled","large-oblique","oblique"],o=["thick"];class a extends HTMLElement{#t=this.attachInternals();#e;#i;static observedAttributes=["glyph-direction","glyph-figure","glyph-style","glyph-weight"];static role="img";static tagName="e-arrow";static directions=(()=>l)();static figures=(()=>s)();static styles=(()=>n)();static weights=(()=>o)();constructor(){super(),this.#e=i.call(this,{template:'<link id="link-styling" fetchpriority="low" href="http://assets.protosite.rocks/core/element.arrow.css" media="screen" rel="stylesheet" type="text/css" title="Visual Rules for Arrow Element"><link id="link-glyph-collection" fetchpriority="low" href="http://assets.protosite.rocks/uikit/element/icon.glyphs-arrow.css" media="screen" rel="stylesheet" type="text/css" title="Visual Symbol defines by the glyph name that passed to the data attribute"><style type="text/css">:host(:state(--defined)) {\n\tcontent-visibility: hidden;\n}\n:host(:state(--loaded)) {\n\tcontent-visibility: visible;\n}</style><div class="icon" id="icon-container" data-glyph="arrow" role="presentation"></div><slot></slot>'}),this.#l.add(e.Defined)}attributeChangedCallback(t,e,i){e!==i&&this.#s()}connectedCallback(){this.setAttribute("role",a.role),this.#n.onload=t=>{let{currentTarget:i}=t;this.#i=i.sheet,this.#l.add(e.Loaded)}}#s(){const t=["arrow"],[e,i,l,s]=["glyph-direction","glyph-figure","glyph-style","glyph-weight"].map((t=>this.getAttribute(t)));if(null!==s){if(!d(s))throw new TypeError(`Invalid Weight: ${s}`);t.push(s)}if(null!==e){if(!r(e))throw new TypeError(`Invalid Direction: ${e}`);t.push(e)}if(null!==i){if(!c(i))throw new TypeError(`Invalid Figure: ${i}`);t.push(i)}if(null!==l){if(!h(l))throw new TypeError(`Invalid Style: ${l}`);t.push(l)}const n=t.join("-");console.assert(((t,e)=>{if(null===e||!1===Boolean(e?.cssRules))return!0;for(const i of e.cssRules)if(i.selectorText===`[data-glyph="${t}"]`)return!0;return!1})(n,this.#i),`Unsupported Glyph: ${n}`),this.#o.dataset.glyph=n}get#o(){return this.#e.getElementById("icon-container")}get#n(){return this.#e.getElementById("link-styling")}get#l(){return this.#t.states}}const r=t=>a.directions.includes(t),c=t=>a.figures.includes(t),h=t=>a.styles.includes(t),d=t=>a.weights.includes(t);customElements.define(a.tagName,a),customElements.get(a.tagName)}();